@model ReportListViewModel
@using ReportSystem.Data.Models;

@{
    ViewData["Title"] = "Reports list";

    async Task SelectedOption(string optionTitle, string queryOptionName, string checkOptionValue)
    {
        string optionValue = Context.Request.Query[queryOptionName];
        optionValue = optionValue == null ? "" : optionValue;

        if (optionValue == checkOptionValue)
        {
            <option value="@checkOptionValue" selected="selected">@optionTitle</option>
        }
        else
        {
            <option value="@checkOptionValue">@optionTitle</option>
        }
    }
}

@if (Model.Reports.Count == 0)
{
    <h1 class="text-center">There are no reports!</h1>
}
else
{
    <h1 class="text-center">@ViewData["Title"]</h1>
}

<form class="form-inline mt-3" method="GET" asp-controller="Reports" asp-action="Reports">
    <div class="form-group">
        <input 
            class="form-control" 
            type="text" 
            placeholder="Search criteria" 
            name="search"
            value="@Context.Request.Query["search"]">
    </div>
    <div class="form-group mx-sm-3">
        <select class="form-control" name="sort" value="@Context.Request.Query["sort"]">
            @{
                await SelectedOption("Newest first", "sort", "newest_first");
                await SelectedOption("Newest last", "sort", "newest_last");
            }
        </select>
    </div>
    <div class="form-group mr-sm-3">
        <select class="form-control" name="status">
            @{
                await SelectedOption("All", "status", "");
                await SelectedOption("Open", "status", "open");
                await SelectedOption("In progress", "status", "in_progress");
                await SelectedOption("Resolved", "status", "resolved");
                await SelectedOption("Refused", "status", "refused");
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Filter</button>
</form>

<div class="accordion mt-3" id="accordionExample">
    @foreach (ReportViewModel report in Model.Reports)
    {
        <div class="card">
            <div class="card-header">
                <h2 class="mb-0">
                    <button class="btn btn-link" type="button" data-toggle="collapse" data-target=@($"#item{report.ID}")>
                        @report.CreationDate @report.Title reported by @report.Author.UserName
                    </button>
                    @if (report.Status == ReportStatus.OPEN)
                    {
                        <span class="badge badge-pill badge-primary">Open</span>
                    }
                    else if (report.Status == ReportStatus.IN_PROGRESS)
                    {
                        <span class="badge badge-pill badge-warning">In progress</span>
                    }
                    else if (report.Status == ReportStatus.RESOLVED)
                    {
                        <span class="badge badge-pill badge-success">Resolved</span>
                    }
                    else if (report.Status == ReportStatus.REFUSED)
                    {
                        <span class="badge badge-pill badge-danger">Refused</span>
                    }
                </h2>
            </div>
            <div id=@($"item{report.ID}") class="collapse" data-parent="#accordionExample">
                <div class="card-body">
                    @report.Description

                    @await Html.PartialAsync("_ReportStatusPartial", new ReportStatusViewModel()
                    {
                        ID = report.ID,
                        Status = report.Status,
                        Resolution = report.Resolution,
                        Photo = report.Photo
                    })
                </div>
            </div>
        </div>
    }
</div>

@{
    var prevDisabled = !Model.Reports.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Reports.HasNextPage ? "disabled" : "";
}
<nav class="mt-3">
    <ul class="pagination">
        <li class="page-item @prevDisabled">
            <a 
                class="page-link"
                asp-route-page="@(Model.Reports.PageIndex - 1)"
                asp-route-search="@Model.Search"
                asp-route-sort="@Model.Sort"
                asp-route-status="@Model.Status"
                asp-controller="Reports"
                asp-action="Reports">
                Previous
            </a>
        </li>
        <li class="page-item @nextDisabled">
            <a 
                class="page-link" 
                asp-route-page="@(Model.Reports.PageIndex + 1)"
                asp-route-search="@Model.Search"
                asp-route-sort="@Model.Sort"
                asp-route-status="@Model.Status"
                asp-controller="Reports"
                asp-action="Reports">
                Next
            </a>
        </li>
    </ul>
</nav>