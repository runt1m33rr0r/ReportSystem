@model ReportListViewModel
@using ReportSystem.Data.Models;

@{
    ViewData["Title"] = "Reports list";

    async Task SelectedOption(string optionTitle, string checkOptionValue, string modelValue)
    {
        if (modelValue == checkOptionValue)
        {
            <option value="@checkOptionValue" selected="selected">@optionTitle</option>
        }
        else
        {
            <option value="@checkOptionValue">@optionTitle</option>
        }
    }
}

@if (Model.Reports.Count == 0)
{
    <h1 class="text-center">There are no reports!</h1>
}
else
{
    <h1 class="text-center">@ViewData["Title"]</h1>
}

<form class="mt-3" method="GET" asp-controller="Reports" asp-action="Reports">
    <input type="hidden" name="page" value="@Context.Request.Query["page"]">

    <div class="form-row">
        <div class="form-group col-sm">
            <input 
                class="form-control" 
                type="text" 
                placeholder="Search criteria" 
                name="search"
                value="@Model.Search">
        </div>
        <div class="form-group col-sm">
            <select class="form-control" name="sort">
                @{
                    await SelectedOption("Newest first", "newest_first", Model.Sort);
                    await SelectedOption("Newest last", "newest_last", Model.Sort);
                }
            </select>
        </div>
        <div class="form-group col-sm">
            <select class="form-control" name="status">
                @{
                    await SelectedOption("All", "", Model.Status);
                    await SelectedOption("Open", "open", Model.Status);
                    await SelectedOption("In progress", "in_progress", Model.Status);
                    await SelectedOption("Resolved", "resolved", Model.Status);
                    await SelectedOption("Refused", "refused", Model.Status);
                }
            </select>
        </div>
        <div class="form-group col-sm">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
</form>

<div class="accordion mt-3" id="reportsAccordion">
    @foreach (ReportViewModel report in Model.Reports)
    {
        <div class="card">
            <div class="card-header">
                <h2 class="mb-0 d-flex justify-content-between align-items-center">
                    <button class="btn btn-link" type="button" data-toggle="collapse" data-target="@($"#item{report.ID}")">
                        @report.CreationDate @report.Title reported by @report.Author.UserName
                    </button>
                    @if (report.Status == ReportStatus.OPEN)
                    {
                        <span class="badge badge-pill badge-primary">Open</span>
                    }
                    else if (report.Status == ReportStatus.IN_PROGRESS)
                    {
                        <span class="badge badge-pill badge-warning">In progress</span>
                    }
                    else if (report.Status == ReportStatus.RESOLVED)
                    {
                        <span class="badge badge-pill badge-success">Resolved</span>
                    }
                    else if (report.Status == ReportStatus.REFUSED)
                    {
                        <span class="badge badge-pill badge-danger">Refused</span>
                    }
                    
                    @await Html.PartialAsync("_DeleteReportPartial", new DeleteReportViewModel(
                        report.ID,
                        Model.Reports.PageIndex,
                        Model.Search,
                        Model.Sort,
                        Model.Status,
                        Model.Personal
                    ))
                </h2>
            </div>
            <div id="@($"item{report.ID}")" class="collapse" data-parent="#reportsAccordion">
                <div class="card-body">
                    @report.Description

                    @await Html.PartialAsync("_ReportStatusPartial", new ReportStatusViewModel(
                        report.ID,
                        report.Status,
                        report.Resolution,
                        report.Photo,
                        Model.Reports.PageIndex,
                        Model.Search,
                        Model.Sort,
                        Model.Status
                    ))
                </div>
            </div>
        </div>
    }
</div>

@{
    var prevDisabled = !Model.Reports.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Reports.HasNextPage ? "disabled" : "";
}
<nav class="mt-3">
    <ul class="pagination">
        <li class="page-item @prevDisabled">
            <a 
                class="page-link"
                asp-route-page="@(Model.Reports.PageIndex - 1)"
                asp-route-search="@Model.Search"
                asp-route-sort="@Model.Sort"
                asp-route-status="@Model.Status"
                asp-route-personal="@Model.Personal"
                asp-controller="Reports"
                asp-action="Reports">
                Previous
            </a>
        </li>
        <li class="page-item @nextDisabled">
            <a 
                class="page-link" 
                asp-route-page="@(Model.Reports.PageIndex + 1)"
                asp-route-search="@Model.Search"
                asp-route-sort="@Model.Sort"
                asp-route-status="@Model.Status"
                asp-route-personal="@Model.Personal"
                asp-controller="Reports"
                asp-action="Reports">
                Next
            </a>
        </li>
    </ul>
</nav>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}